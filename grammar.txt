Expr -> AssignmentExpr
AssignmentExpr -> AddExpr (= AddExpr)*
AddExpr -> MulExpr (+|- MulExpr)*
MulExpr -> UnaryExpr (*|/ UnaryExpr)*
UnaryExpr -> -ExpExpr | ExpExpr
ExpExpr -> ExpExpr (^ UnaryExpr)*
PrimaryExpr -> Block | LetExpr | FunctionCall | ID | Number | '(' Expr ')'

LetExpr -> let ID = Expr
ReturnExpr -> Expr | return Expr

Statement -> Expr ;

Program -> Statement*

ExprList -> (Expr) (, Expr)*
FunctionCall -> ID '(' ExprList ')'
Array -> '[' ExprList ']'
Block -> '{' Statement* '}'